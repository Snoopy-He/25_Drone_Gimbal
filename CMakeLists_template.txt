#${templateWarning}
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_VERSION 1)
${cmakeRequiredVersion}
# specify cross-compilers and tools
set(CMAKE_C_COMPILER arm-none-eabi-gcc)
set(CMAKE_CXX_COMPILER arm-none-eabi-g++)
set(CMAKE_ASM_COMPILER  arm-none-eabi-gcc)
set(CMAKE_AR arm-none-eabi-ar)
set(CMAKE_OBJCOPY arm-none-eabi-objcopy)
set(CMAKE_OBJDUMP arm-none-eabi-objdump)
set(SIZE arm-none-eabi-size)
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

# project settings
project(${projectName} C CXX ASM)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 11)

#Uncomment for hardware floating point
add_compile_definitions(ARM_MATH_CM4;ARM_MATH_MATRIX_CHECK;ARM_MATH_ROUNDING)
add_compile_options(-mfloat-abi=hard -mfpu=fpv4-sp-d16)
add_link_options(-mfloat-abi=hard -mfpu=fpv4-sp-d16)

#Uncomment for software floating point
#add_compile_options(-mfloat-abi=soft)

add_compile_options(-mcpu=${mcpu} -mthumb -mthumb-interwork)
add_compile_options(-ffunction-sections -fdata-sections -fno-common -fmessage-length=0)

# uncomment to mitigate c++17 absolute addresses warnings
#set(CMAKE_CXX_FLAGS "$${CMAKE_CXX_FLAGS} -Wno-register")

# Enable assembler files preprocessing
add_compile_options($<$<COMPILE_LANGUAGE:ASM>:-x$<SEMICOLON>assembler-with-cpp>)

if ("$${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    message(STATUS "Maximum optimization for speed")
    add_compile_options(-Ofast)
elseif ("$${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
    message(STATUS "Maximum optimization for speed, debug info included")
    add_compile_options(-Ofast -g)
elseif ("$${CMAKE_BUILD_TYPE}" STREQUAL "MinSizeRel")
    message(STATUS "Maximum optimization for size")
    add_compile_options(-Os)
else ()
    message(STATUS "Minimal optimization, debug info included")
    add_compile_options(-Og -g)
endif ()

include_directories(${includes})
include_directories(User/Framework/Gimbal_BSP/Remote_bsp
                    User/Framework/Gimbal_BSP/Can_bsp
                    User/Framework/Gimbal_BSP/IMU_bsp/BMI088
                    User/Framework/Gimbal_BSP/IMU_bsp
                    User/Framework/RemoteC
                    User/Framework/PID
                    User/Framework/Debug
                    User/Framework/Gimbal
                    User/MotorC
                    Tasks/Gimbal_Motor
                    Tasks/Printf)


add_definitions(${defines})

file(GLOB_RECURSE SOURCES ${sources})

set(LINKER_SCRIPT $${CMAKE_SOURCE_DIR}/${linkerScript})

add_link_options(-Wl,-gc-sections,--print-memory-usage,-Map=$${PROJECT_BINARY_DIR}/$${PROJECT_NAME}.map)
add_link_options(-mcpu=${mcpu} -mthumb -mthumb-interwork)
add_link_options(-T $${LINKER_SCRIPT})

add_executable($${PROJECT_NAME}.elf $${SOURCES} $${LINKER_SCRIPT}
              Core/Src/main.cpp
              User/Framework/Gimbal_BSP/Remote_bsp/remote_bsp.cpp
              User/Framework/Gimbal_BSP/Remote_bsp/remote_bsp.h
              User/Framework/Gimbal_BSP/Can_bsp/can_bsp.cpp
              User/Framework/Gimbal_BSP/Can_bsp/can_bsp.h
              User/Framework/Gimbal_BSP/IMU_bsp/BMI088/BMI088_bsp.cpp
              User/Framework/Gimbal_BSP/IMU_bsp/BMI088/BMI088_bsp.h
              User/Framework/Gimbal_BSP/IMU_bsp/BMI088/BMI088_reg_bsp.h
              User/Framework/Gimbal_BSP/IMU_bsp/BMI088/BMI088_Middleware.cpp
              User/Framework/Gimbal_BSP/IMU_bsp/BMI088/BMI088_Middleware.h
              User/Framework/Gimbal_BSP/IMU_bsp/BMI088/struct_typedef.h
              User/Framework/Gimbal_BSP/IMU_bsp/imu_bsp_delay.cpp
              User/Framework/Gimbal_BSP/IMU_bsp/imu_bsp_delay.h
              User/Framework/RemoteC/remotec.cpp
              User/Framework/RemoteC/remotec.h
              User/Framework/PID/pid.cpp
              User/Framework/PID/pid.h
              User/Framework/Debug/debug.cpp
              User/Framework/Debug/debug.h
              User/Framework/Gimbal/gimbal.cpp
              User/Framework/Gimbal/gimbal.h
              User/MotorC/motor.cpp
              User/MotorC/motor.h
              Tasks/Gimbal_Motor/Gimbal_Motor_Task.cpp
              Tasks/Gimbal_Motor/Gimbal_Motor_Task.h
              Tasks/Printf/Printf_Task.cpp
              Tasks/Printf/Printf_Task.h)

set(HEX_FILE $${PROJECT_BINARY_DIR}/$${PROJECT_NAME}.hex)
set(BIN_FILE $${PROJECT_BINARY_DIR}/$${PROJECT_NAME}.bin)

add_custom_command(TARGET $${PROJECT_NAME}.elf POST_BUILD
        COMMAND $${CMAKE_OBJCOPY} -Oihex $<TARGET_FILE:$${PROJECT_NAME}.elf> $${HEX_FILE}
        COMMAND $${CMAKE_OBJCOPY} -Obinary $<TARGET_FILE:$${PROJECT_NAME}.elf> $${BIN_FILE}
        COMMENT "Building $${HEX_FILE}
Building $${BIN_FILE}")
